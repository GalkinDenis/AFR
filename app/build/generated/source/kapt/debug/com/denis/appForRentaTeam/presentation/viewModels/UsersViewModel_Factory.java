// Generated by Dagger (https://dagger.dev).
package com.denis.appForRentaTeam.presentation.viewModels;

import com.denis.appForRentaTeam.domain.usecases.GetUsersUseCase;
import com.denis.appForRentaTeam.domain.usecases.LoadUsersUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UsersViewModel_Factory implements Factory<UsersViewModel> {
  private final Provider<GetUsersUseCase> getUsersUseCaseProvider;

  private final Provider<LoadUsersUseCase> loadUsersUseCaseProvider;

  public UsersViewModel_Factory(Provider<GetUsersUseCase> getUsersUseCaseProvider,
      Provider<LoadUsersUseCase> loadUsersUseCaseProvider) {
    this.getUsersUseCaseProvider = getUsersUseCaseProvider;
    this.loadUsersUseCaseProvider = loadUsersUseCaseProvider;
  }

  @Override
  public UsersViewModel get() {
    return newInstance(getUsersUseCaseProvider.get(), loadUsersUseCaseProvider.get());
  }

  public static UsersViewModel_Factory create(Provider<GetUsersUseCase> getUsersUseCaseProvider,
      Provider<LoadUsersUseCase> loadUsersUseCaseProvider) {
    return new UsersViewModel_Factory(getUsersUseCaseProvider, loadUsersUseCaseProvider);
  }

  public static UsersViewModel newInstance(GetUsersUseCase getUsersUseCase,
      LoadUsersUseCase loadUsersUseCase) {
    return new UsersViewModel(getUsersUseCase, loadUsersUseCase);
  }
}
