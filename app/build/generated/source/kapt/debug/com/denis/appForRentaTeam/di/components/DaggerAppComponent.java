// Generated by Dagger (https://dagger.dev).
package com.denis.appForRentaTeam.di.components;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.denis.appForRentaTeam.data.datasources.UsersDataSourceImpl;
import com.denis.appForRentaTeam.data.datasources.UsersDataSourceImpl_Factory;
import com.denis.appForRentaTeam.data.datasources.database.UsersDao;
import com.denis.appForRentaTeam.data.datasources.database.UsersRoomDatabase;
import com.denis.appForRentaTeam.data.datasources.localdatasource.LocalDataSourceImpl;
import com.denis.appForRentaTeam.data.datasources.localdatasource.LocalDataSourceImpl_Factory;
import com.denis.appForRentaTeam.data.datasources.network.UsersApi;
import com.denis.appForRentaTeam.data.usersrepositoryimpl.UsersRepositoryImpl;
import com.denis.appForRentaTeam.data.usersrepositoryimpl.UsersRepositoryImpl_Factory;
import com.denis.appForRentaTeam.di.modules.DataModule_ProvideDaoFactory;
import com.denis.appForRentaTeam.di.modules.DataModule_ProvideDataBaseFactory;
import com.denis.appForRentaTeam.di.modules.NetworkModule;
import com.denis.appForRentaTeam.di.modules.NetworkModule_ProvideRetrofitFactory;
import com.denis.appForRentaTeam.di.modules.NetworkModule_ProvideUsersApiFactory;
import com.denis.appForRentaTeam.domain.repository.UsersRepository;
import com.denis.appForRentaTeam.domain.usecases.GetUsersUseCase;
import com.denis.appForRentaTeam.domain.usecases.GetUsersUseCase_Factory;
import com.denis.appForRentaTeam.domain.usecases.LoadUsersUseCase;
import com.denis.appForRentaTeam.domain.usecases.LoadUsersUseCase_Factory;
import com.denis.appForRentaTeam.presentation.viewModels.UserCardViewModel;
import com.denis.appForRentaTeam.presentation.viewModels.UserCardViewModel_Factory;
import com.denis.appForRentaTeam.presentation.viewModels.UsersViewModel;
import com.denis.appForRentaTeam.presentation.viewModels.UsersViewModel_Factory;
import com.denis.appForRentaTeam.presentation.viewModels.ViewModelFactory;
import com.denis.appForRentaTeam.presentation.viewModels.ViewModelFactory_Factory;
import com.denis.appForRentaTeam.ui.UserCard;
import com.denis.appForRentaTeam.ui.UserCard_MembersInjector;
import com.denis.appForRentaTeam.ui.userListFragment.UserListFragment;
import com.denis.appForRentaTeam.ui.userListFragment.UserListFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<UsersApi> provideUsersApiProvider;

  private Provider<Context> applicationContextProvider;

  private Provider<UsersRoomDatabase> provideDataBaseProvider;

  private Provider<UsersDao> provideDaoProvider;

  private Provider<LocalDataSourceImpl> localDataSourceImplProvider;

  private Provider<UsersDataSourceImpl> usersDataSourceImplProvider;

  private Provider<UsersRepositoryImpl> usersRepositoryImplProvider;

  private Provider<UsersRepository> provideUsersRepositoryProvider;

  private Provider<GetUsersUseCase> getUsersUseCaseProvider;

  private Provider<LoadUsersUseCase> loadUsersUseCaseProvider;

  private Provider<UsersViewModel> usersViewModelProvider;

  private Provider<ViewModel> provideUserViewModelProvider;

  private Provider<ViewModel> provideUserCardViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<ViewModelProvider.Factory> bindViewModelFactoryProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam, Context applicationContextParam) {

    initialize(networkModuleParam, applicationContextParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final Context applicationContextParam) {
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam));
    this.provideUsersApiProvider = DoubleCheck.provider(NetworkModule_ProvideUsersApiFactory.create(networkModuleParam, provideRetrofitProvider));
    this.applicationContextProvider = InstanceFactory.create(applicationContextParam);
    this.provideDataBaseProvider = DoubleCheck.provider(DataModule_ProvideDataBaseFactory.create(applicationContextProvider));
    this.provideDaoProvider = DoubleCheck.provider(DataModule_ProvideDaoFactory.create(provideDataBaseProvider));
    this.localDataSourceImplProvider = LocalDataSourceImpl_Factory.create(provideDaoProvider);
    this.usersDataSourceImplProvider = UsersDataSourceImpl_Factory.create(provideUsersApiProvider, (Provider) localDataSourceImplProvider);
    this.usersRepositoryImplProvider = UsersRepositoryImpl_Factory.create((Provider) usersDataSourceImplProvider);
    this.provideUsersRepositoryProvider = DoubleCheck.provider((Provider) usersRepositoryImplProvider);
    this.getUsersUseCaseProvider = GetUsersUseCase_Factory.create(provideUsersRepositoryProvider);
    this.loadUsersUseCaseProvider = LoadUsersUseCase_Factory.create(provideUsersRepositoryProvider);
    this.usersViewModelProvider = UsersViewModel_Factory.create(getUsersUseCaseProvider, loadUsersUseCaseProvider);
    this.provideUserViewModelProvider = DoubleCheck.provider((Provider) usersViewModelProvider);
    this.provideUserCardViewModelProvider = DoubleCheck.provider((Provider) UserCardViewModel_Factory.create());
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(UsersViewModel.class, provideUserViewModelProvider).put(UserCardViewModel.class, provideUserCardViewModelProvider).build();
    this.viewModelFactoryProvider = ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider);
    this.bindViewModelFactoryProvider = DoubleCheck.provider((Provider) viewModelFactoryProvider);
  }

  @Override
  public void injectUsersListFragment(UserListFragment fragment) {
    injectUserListFragment(fragment);
  }

  @Override
  public void injectUserCardFragment(UserCard fragment) {
    injectUserCard(fragment);
  }

  private UserListFragment injectUserListFragment(UserListFragment instance) {
    UserListFragment_MembersInjector.injectViewModelFactory(instance, bindViewModelFactoryProvider.get());
    return instance;
  }

  private UserCard injectUserCard(UserCard instance) {
    UserCard_MembersInjector.injectViewModelFactory(instance, bindViewModelFactoryProvider.get());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new DaggerAppComponent(new NetworkModule(), applicationContext);
    }
  }
}
